# .zshrc

# Source global definitions
#if [ -f /etc/zshrc ]; then
#	. /etc/zshrc
#fi

# User specific environment
# (for M1) ARM / x86 Switch-homebrew
if [ "$(uname -m)" = "arm64" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
  #export PATH="/opt/homebrew/bin:$PATH"
else
  eval "$(/usr/local/bin/brew shellenv)"
fi

# Pyenv
if [ "$(uname -m)" = "arm64" ]; then
  # arm64
  export PYENV_ROOT="$HOME/opt/homebrew/Cellar/pyenv"
  export PATH="$HOME/opt/homebrew/Cellar/pyenv/2.3.23:$PATH"
  eval "$(pyenv init -)"
else
  # x86_64
  export PYENV_ROOT="$HOME/.pyenv_x64"
  export PATH="$HOME/.pyenv_x64/bin:$PATH"
  eval "$(pyenv init -)"
fi

# miniforge
# source ~/opt/homebrew/Cellar/pyenv/versions/miniforge3-22.9.0-3/bin/activate  # commented out by conda initialize


# alias
alias ls="ls -G"
alias ll="ls -lG"
alias la="ls -laG"
alias coa="conda activate"
alias cod="conda deactivate"
alias slp="pmset sleepnow"
alias cdg="cd Google\ Drive/My\ Drive/"
alias rm="trash -F"
alias swa="switch-arch"
alias w='() { curl -H "Accept-Language: ${LANG%_*}" wttr.in/"${1:-Tokyo}" }'
alias ac="open Google\ Drive/My\ Drive/Share/Academic_Calendar_2023.pdf"
alias gakuseki='open "https://www.musashino-u.ac.jp/student-life/muscat/id_number/"'
alias reshell='exec $SHELL -l'
alias github-fki='curl https://github-contributions-api.deno.dev/Rintaro-Fukui.term'
alias gpt='open https://chat.openai.com/'

# shell setting
ARCH=`uname -m`
PROMPT="
%F{green}${ARCH}%f:%F{blue}%~%f
%F{magenta}❯%f "

# share command history between shells
setopt share_history
# enable show colors
autoload -Uz colors ; colors
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Enable completion function
autoload -Uz compinit
compinit
# Fill in the selection in the completion list
zstyle ':completion:*' menu select

# Correcting incorrect commands
setopt correct

# (for M1) ARM / x86 Switcher
switch-arch() {
    if  [[ "$(uname -m)" == arm64 ]]; then
       arch=x86_64
    elif [[ "$(uname -m)" == x86_64 ]]; then
       arch=arm64e
    fi
    exec arch -arch $arch "$SHELL"
}

# Hyper Config
# Override auto-title when static titles are desired ($ title My new title)
title() { export TITLE_OVERRIDDEN=1; echo -en "\e]0;$*\a"}
# Turn off static titles ($ autotitle)
autotitle() { export TITLE_OVERRIDDEN=0 }; autotitle
# Condition checking if title is overridden
overridden() { [[ $TITLE_OVERRIDDEN == 1 ]]; }
# Echo asterisk if git state is dirty
gitDirty() { [[ $(git status 2> /dev/null | grep -o '\w\+' | tail -n1) != ("clean"|"") ]] && echo "*" }

# Show cwd when shell prompts for input.
precmd() {
   if overridden; then return; fi
   cwd=${$(pwd)##*/} # Extract current working dir only
   print -Pn "\e]0;$cwd$(gitDirty)\a" # Replace with $pwd to show full path
}

# Prepend command (w/o arguments) to cwd while waiting for command to complete.
preexec() {
   if overridden; then return; fi
   printf "\033]0;%s\a" "${1%% *} | $cwd$(gitDirty)" # Omit construct from $1 to show args
}

# Pipenv environment path
# export PIPENV_VENV_IN_PROJECT=true
export PATH="/opt/homebrew/opt/bzip2/bin:$PATH"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/takumi/opt/homebrew/Cellar/pyenv/versions/miniforge3-22.9.0-3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/takumi/opt/homebrew/Cellar/pyenv/versions/miniforge3-22.9.0-3/etc/profile.d/conda.sh" ]; then
        . "/Users/takumi/opt/homebrew/Cellar/pyenv/versions/miniforge3-22.9.0-3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/takumi/opt/homebrew/Cellar/pyenv/versions/miniforge3-22.9.0-3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

